#!/usr/bin/env python3

VERSION = "2016s1_1.0.0"

##############################################################################
# DEFAULTS #
CSSE7030 = False
SCRIPT = "assign1"
TEST_DATA = None
TEST_DATA_RAW = '##################### INPUTS ##########################\nMAKE_INITIAL_STATE_4 = 4\nMAKE_INITIAL_STATE_8 = 8\nMAKE_INITIAL_STATE_12 = 12\nMAKE_INITIAL_STATE_1000 = 1000\n\nMAKE_POSITION_STRING_8 = 8\nMAKE_POSITION_STRING_18 = 18\nMAKE_POSITION_STRING_24 = 24\nMAKE_POSITION_STRING_2000 = 2000\n\nNUM_DIFFS_4 = "TATATATA__"\nNUM_DIFFS_8 = \'TAATTA__AT\'\nNUM_DIFFS_12 = \'TAATTATA__TTAT\'\n\nPOSITION_OF_BLANKS_8_0 = "TATATATA__"\nPOSITION_OF_BLANKS_8_1 = \'TAATTA__AT\'\nPOSITION_OF_BLANKS_8_2 = \'__TAATTAAT\'\nPOSITION_OF_BLANKS_12_1 =\'TAATTATA__TTAT\'\nPOSITION_OF_BLANKS_12_2 =\'TAATTATATTAT__\'\n\nMAKE_MOVE_STATE_0_0 = "TATATATA__"\nMAKE_MOVE_POSITION_0_0 = 1\nMAKE_MOVE_STATE_0_1 = "T__ATATAAT"\nMAKE_MOVE_POSITION_0_1 = 3\nMAKE_MOVE_STATE_0_2 = "TAT__ATAAT"\n\nMAKE_MOVE_STATE_1 = \'TAATTAAT__\'\nMAKE_MOVE_STATE_2 = \'__TAATTAAT\'\nMAKE_MOVE_STATE_3 = \'TAAT__TAAT\'\nMAKE_MOVE_POSITION_0 = 0\nMAKE_MOVE_POSITION_2 = 2\nMAKE_MOVE_POSITION_4 = 4\nMAKE_MOVE_POSITION_6 = 6\nMAKE_MOVE_POSITION_8 = 8\n\nSTATES_0 = """\nTATATATA__\nT__ATATAAT\nTAT__ATAAT\n""".strip().split()\n\nSTATES_4 = """\nTATATATA__\nTATAT__AAT\nTA__TTAAAT\nTAATTTAA__\nT__TTTAAAA\n""".strip().split()\n\nSTATES_16 = """\nTATATATATATATATATATATATATATATATA__\n__TATATATATATATATATATATATATATATATA\nTATATATATATATATATATA__TATATATATATA\nTATAT__ATATATATATATAATTATATATATATA\nTATATTAATATATA__TATAATTATATATATATA\nTATATTAATATATAAATAT__TTATATATATATA\nTATATTAATATATAAATATTT__ATATATATATA\nTATATTAATA__TAAATATTTTAATATATATATA\n""".strip().split()\n\nSTATES_200 = """\n\n""".strip().split()\n\n################### Expected Results ###########################\nMAKE_INITIAL_STATE_4_RESULT = \'TATATATA__\'\nMAKE_INITIAL_STATE_8_RESULT = \'TATATATATATATATA__\'\nMAKE_INITIAL_STATE_12_RESULT = \'TATATATATATATATATATATATA__\'\nMAKE_INITIAL_STATE_1000_RESULT = \'TA\' * 1000 + \'__\'\n\nMAKE_POSITION_STRING_8_RESULT = \'01234567\'\nMAKE_POSITION_STRING_18_RESULT = \'012345678901234567\'\nMAKE_POSITION_STRING_24_RESULT = \'012345678901234567890123\'\nMAKE_POSITION_STRING_2000_RESULT = \'0123456789\'*200\n\nNUM_DIFFS_4_RESULT = 8\nNUM_DIFFS_8_RESULT = 6\nNUM_DIFFS_12_RESULT = 9\n\nPOSITION_OF_BLANKS_8_0_RESULT = 8\nPOSITION_OF_BLANKS_8_1_RESULT = 6\nPOSITION_OF_BLANKS_8_2_RESULT = 0\nPOSITION_OF_BLANKS_12_1_RESULT = 8\nPOSITION_OF_BLANKS_12_2_RESULT = 12\n\nMAKE_MOVE_1_0_RESULT = \'__ATTAATTA\'\nMAKE_MOVE_1_6_RESULT = \'TAATTA__AT\'\nMAKE_MOVE_2_2_RESULT = \'TA__ATTAAT\'\nMAKE_MOVE_2_8_RESULT = \'ATTAATTA__\'\nMAKE_MOVE_3_2_RESULT = \'TA__ATTAAT\'\nMAKE_MOVE_3_6_RESULT = \'TAATTA__AT\'\n\nSHOW_CURRENT_STATE_0_0 = """0123456789\nT__ATATAAT 7 1\n"""\n\nSHOW_CURRENT_STATE_0_1 = """0123456789\nTAT__ATAAT 7 2\n"""\n\n###################### Tests #####################################\n\ndef titled_test_label(data):\n    return "{name}({args_str}){suffix}".format(**data)\n\ndef make_titled_tests(tests_no_title, fn=None, title_format=titled_test_label):\n    tests = []\n    for i, item in enumerate(tests_no_title):\n        suffix = item[0]\n        args = item[1]\n        result = item[2]\n        data = {\n            "i": str(i + 1) + ".",\n            "name": fn,\n            "suffix": suffix,\n            "args_str": ", ".join([str(arg) for arg in args]),\n            "args": args,\n            "result": result\n        }\n        title = "{i:<4} ".format(**data) + title_format(data)\n        tests.append((title,) + tuple(item[1:]))\n    return tests\n\ndef make_ordered_tests(tests_no_title):\n    return make_titled_tests(tests_no_title, None, lambda data: data[\'suffix\'])\n\n\n\ninitial_states_no_title = [\n    (" (Sample from Specification)", [MAKE_INITIAL_STATE_4], MAKE_INITIAL_STATE_4_RESULT),\n    ("", [MAKE_INITIAL_STATE_8], MAKE_INITIAL_STATE_8_RESULT),\n    ("", [MAKE_INITIAL_STATE_12], MAKE_INITIAL_STATE_12_RESULT),\n    ("", [MAKE_INITIAL_STATE_1000], MAKE_INITIAL_STATE_1000_RESULT),\n]\ninitial_states = make_titled_tests(initial_states_no_title, "make_initial_state")\n\nposition_strings_no_title = [\n    ("", [MAKE_POSITION_STRING_8], MAKE_POSITION_STRING_8_RESULT),\n    (" (Sample from Specification)", [MAKE_POSITION_STRING_18], MAKE_POSITION_STRING_18_RESULT),\n    ("", [MAKE_POSITION_STRING_24], MAKE_POSITION_STRING_24_RESULT),\n    ("", [MAKE_POSITION_STRING_2000], MAKE_POSITION_STRING_2000_RESULT),\n]\nposition_strings = make_titled_tests(position_strings_no_title, "make_position_string")\n\ndiffs_no_title = [\n    (" (Sample from Specification)", [NUM_DIFFS_4], NUM_DIFFS_4_RESULT),\n    ("", [NUM_DIFFS_8], NUM_DIFFS_8_RESULT),\n    ("", [NUM_DIFFS_12], NUM_DIFFS_12_RESULT)\n]\n\ndiff_states = [(20, \'TTTTTTATTTAATAA__TTATAAAAAATTAAATAATTTATATAA\'), (26, \'TATTTAAATTTAAATTTTAATTTATATTT__ATAAAAAATATATATAATTAA\'), (34, \'ATTTTATAT__TAAAATAATATTAATATTTTAAATTATATTTTAAAATATATTTAATATAAA\'), (33, \'ATTTTAATTAATTTTAATAAATAAAATTTTAATAATTTTATATAATTAATAATTTAAAAATTA__TATTA\'), (49, \'TATATATATAAAAAATTTATTTAATTATTA__ATTTATAAAAATAATATATAATATTATTAATATTATAATTATATTTTA\'), (37, \'TATTTTTTTTAAAAAATTTATAAATAAAAATTTATTTTTAATTTATTAAAAAA__TATAATTTAATTATAAAAATTAAAATTTAATATATTT\'), (56, \'AAAATAATATTTAAATTATTTTTATATTATTATTTATAATAATTAAATAATATTAAATATTATTTAAAATTTAATATATTAATATT__TTAAATTAAATATTTAAA\'), (62, \'TAAATTAATTAAATATAATTATTATATATATATTTTAAAATTTAATTATAAAATTATAAAAATTATTTTTATATATTTATAAATATT__ATTTAATTAATTAATATATAA\'), (58, \'ATAATATTTTATATAATTAATAATTAAAAATTATTAAATTTTAAATATATTTTTATTTAAAATAAAATTTTTAATTAATTAATTATTTATATTAATAAAA__AATAATAAAATTTTTTTAATTA\'), (82, \'ATTATATATTAAATTTTTTAATATTTAAAAATTTATTTAAAAATTAATTTAAAATAAATA__AATTTAATTATATAATTTATATAATATTTAATAATATTTTTTATTATAAAAAAAAAAAAAAAAAATATTATTTTATTTTTATTTATATAATATATTTATTTATATTAA\')]\nincluded_diff_states_indices = [1, 2, 3, 4, 12, 13] # filter out useless tests\ndiffs_no_title += [("", [state], res) for i, (res, state) in enumerate(diff_states) if (i + 1) in included_diff_states_indices]\n\ndiffs = make_titled_tests(diffs_no_title, "num_diffs", lambda data: "{result} diffs{suffix}".format(**data))\n\nblank_positions_no_title = [\n    (" (Sample from Specification)", [POSITION_OF_BLANKS_8_0], POSITION_OF_BLANKS_8_0_RESULT),\n    ("", [POSITION_OF_BLANKS_8_1], POSITION_OF_BLANKS_8_1_RESULT),\n    ("", [POSITION_OF_BLANKS_8_2], POSITION_OF_BLANKS_8_2_RESULT),\n    #("", [POSITION_OF_BLANKS_12_1], POSITION_OF_BLANKS_12_1_RESULT),\n    #("", [POSITION_OF_BLANKS_12_2], POSITION_OF_BLANKS_12_2_RESULT),\n]\nblank_positions = make_titled_tests(blank_positions_no_title, "position_of_blanks")\n\nmoves_no_title = [\n    (" (Sample #1 from Specification)", [MAKE_MOVE_STATE_0_0, MAKE_MOVE_POSITION_0_0], MAKE_MOVE_STATE_0_1),\n    (" (Sample #2 from Specification)", [MAKE_MOVE_STATE_0_1, MAKE_MOVE_POSITION_0_1], MAKE_MOVE_STATE_0_2),\n    ("", [MAKE_MOVE_STATE_1, MAKE_MOVE_POSITION_0], MAKE_MOVE_1_0_RESULT),\n    ("", [MAKE_MOVE_STATE_1, MAKE_MOVE_POSITION_6], MAKE_MOVE_1_6_RESULT),\n    ("", [MAKE_MOVE_STATE_2, MAKE_MOVE_POSITION_2], MAKE_MOVE_2_2_RESULT),\n    ("", [MAKE_MOVE_STATE_2, MAKE_MOVE_POSITION_8], MAKE_MOVE_2_8_RESULT),\n    ("", [MAKE_MOVE_STATE_3, MAKE_MOVE_POSITION_2], MAKE_MOVE_3_2_RESULT),\n    ("", [MAKE_MOVE_STATE_3, MAKE_MOVE_POSITION_6], MAKE_MOVE_3_6_RESULT),\n]\n\n# not needed due to not adding any value\n# move_tests from state_generator\n#generated_moves = [([\'__ATTTTAATTTAAAATA\', 2], \'AT__TTTAATTTAAAATA\'), ([\'__ATTTTAATTTAAAATA\', 3], \'TTA__TTAATTTAAAATA\'), ([\'__ATTTTAATTTAAAATA\', 4], \'TTAT__TAATTTAAAATA\'), ([\'__ATTTTAATTTAAAATA\', 5], \'TTATT__AATTTAAAATA\'), ([\'__ATTTTAATTTAAAATA\', 6], \'TAATTT__ATTTAAAATA\'), ([\'__ATTTTAATTTAAAATA\', 7], \'AAATTTT__TTTAAAATA\'), ([\'__ATTTTAATTTAAAATA\', 8], \'ATATTTTA__TTAAAATA\'), ([\'__ATTTTAATTTAAAATA\', 9], \'TTATTTTAA__TAAAATA\'), ([\'__ATTTTAATTTAAAATA\', 10], \'TTATTTTAAT__AAAATA\'), ([\'__ATTTTAATTTAAAATA\', 11], \'TAATTTTAATT__AAATA\'), ([\'__ATTTTAATTTAAAATA\', 12], \'AAATTTTAATTT__AATA\'), ([\'__ATTTTAATTTAAAATA\', 13], \'AAATTTTAATTTA__ATA\'), ([\'__ATTTTAATTTAAAATA\', 14], \'AAATTTTAATTTAA__TA\'), ([\'__ATTTTAATTTAAAATA\', 15], \'ATATTTTAATTTAAA__A\'), ([\'__ATTTTAATTTAAAATA\', 16], \'TAATTTTAATTTAAAA__\'), ([\'TTTATAAATAATTAAT__\', 0], \'__TATAAATAATTAATTT\'), ([\'TTTATAAATAATTAAT__\', 1], \'T__ATAAATAATTAATTT\'), ([\'TTTATAAATAATTAAT__\', 2], \'TT__TAAATAATTAATTA\'), ([\'TTTATAAATAATTAAT__\', 3], \'TTT__AAATAATTAATAT\'), ([\'TTTATAAATAATTAAT__\', 4], \'TTTA__AATAATTAATTA\'), ([\'TTTATAAATAATTAAT__\', 5], \'TTTAT__ATAATTAATAA\'), ([\'TTTATAAATAATTAAT__\', 6], \'TTTATA__TAATTAATAA\'), ([\'TTTATAAATAATTAAT__\', 7], \'TTTATAA__AATTAATAT\'), ([\'TTTATAAATAATTAAT__\', 8], \'TTTATAAA__ATTAATTA\'), ([\'TTTATAAATAATTAAT__\', 9], \'TTTATAAAT__TTAATAA\'), ([\'TTTATAAATAATTAAT__\', 10], \'TTTATAAATA__TAATAT\'), ([\'TTTATAAATAATTAAT__\', 11], \'TTTATAAATAA__AATTT\'), ([\'TTTATAAATAATTAAT__\', 12], \'TTTATAAATAAT__ATTA\'), ([\'TTTATAAATAATTAAT__\', 13], \'TTTATAAATAATT__TAA\'), ([\'TTTATAAATAATTAAT__\', 14], \'TTTATAAATAATTA__AT\'), ([\'TAATATTAAAT__TATTA\', 0], \'__ATATTAAATTATATTA\'), ([\'TAATATTAAAT__TATTA\', 1], \'T__TATTAAATAATATTA\'), ([\'TAATATTAAAT__TATTA\', 2], \'TA__ATTAAATATTATTA\'), ([\'TAATATTAAAT__TATTA\', 3], \'TAA__TTAAATTATATTA\'), ([\'TAATATTAAAT__TATTA\', 4], \'TAAT__TAAATATTATTA\'), ([\'TAATATTAAAT__TATTA\', 5], \'TAATA__AAATTTTATTA\'), ([\'TAATATTAAAT__TATTA\', 6], \'TAATAT__AATTATATTA\'), ([\'TAATATTAAAT__TATTA\', 7], \'TAATATT__ATAATATTA\'), ([\'TAATATTAAAT__TATTA\', 8], \'TAATATTA__TAATATTA\'), ([\'TAATATTAAAT__TATTA\', 9], \'TAATATTAA__ATTATTA\'), ([\'TAATATTAAAT__TATTA\', 13], \'TAATATTAAATTA__TTA\'), ([\'TAATATTAAAT__TATTA\', 14], \'TAATATTAAATATT__TA\'), ([\'TAATATTAAAT__TATTA\', 15], \'TAATATTAAATTTTA__A\'), ([\'TAATATTAAAT__TATTA\', 16], \'TAATATTAAATTATAT__\'), ([\'TTTTAT__TTAAAAAAAT\', 0], \'__TTATTTTTAAAAAAAT\'), ([\'TTTTAT__TTAAAAAAAT\', 1], \'T__TATTTTTAAAAAAAT\'), ([\'TTTTAT__TTAAAAAAAT\', 2], \'TT__ATTTTTAAAAAAAT\'), ([\'TTTTAT__TTAAAAAAAT\', 3], \'TTT__TTATTAAAAAAAT\'), ([\'TTTTAT__TTAAAAAAAT\', 4], \'TTTT__ATTTAAAAAAAT\'), ([\'TTTTAT__TTAAAAAAAT\', 8], \'TTTTATTT__AAAAAAAT\'), ([\'TTTTAT__TTAAAAAAAT\', 9], \'TTTTATTAT__AAAAAAT\'), ([\'TTTTAT__TTAAAAAAAT\', 10], \'TTTTATAATT__AAAAAT\'), ([\'TTTTAT__TTAAAAAAAT\', 11], \'TTTTATAATTA__AAAAT\'), ([\'TTTTAT__TTAAAAAAAT\', 12], \'TTTTATAATTAA__AAAT\'), ([\'TTTTAT__TTAAAAAAAT\', 13], \'TTTTATAATTAAA__AAT\'), ([\'TTTTAT__TTAAAAAAAT\', 14], \'TTTTATAATTAAAA__AT\'), ([\'TTTTAT__TTAAAAAAAT\', 15], \'TTTTATAATTAAAAA__T\'), ([\'TTTTAT__TTAAAAAAAT\', 16], \'TTTTATATTTAAAAAA__\'), ([\'TATTAAAAATATTTA__T\', 0], \'__TTAAAAATATTTATAT\'), ([\'TATTAAAAATATTTA__T\', 1], \'T__TAAAAATATTTAATT\'), ([\'TATTAAAAATATTTA__T\', 2], \'TA__AAAAATATTTATTT\'), ([\'TATTAAAAATATTTA__T\', 3], \'TAT__AAAATATTTATAT\'), ([\'TATTAAAAATATTTA__T\', 4], \'TATT__AAATATTTAAAT\'), ([\'TATTAAAAATATTTA__T\', 5], \'TATTA__AATATTTAAAT\'), ([\'TATTAAAAATATTTA__T\', 6], \'TATTAA__ATATTTAAAT\'), ([\'TATTAAAAATATTTA__T\', 7], \'TATTAAA__TATTTAAAT\'), ([\'TATTAAAAATATTTA__T\', 8], \'TATTAAAA__ATTTAATT\'), ([\'TATTAAAAATATTTA__T\', 9], \'TATTAAAAA__TTTATAT\'), ([\'TATTAAAAATATTTA__T\', 10], \'TATTAAAAAT__TTAATT\'), ([\'TATTAAAAATATTTA__T\', 11], \'TATTAAAAATA__TATTT\'), ([\'TATTAAAAATATTTA__T\', 12], \'TATTAAAAATAT__ATTT\'), ([\'TATTAAAAATATTTA__T\', 13], \'TATTAAAAATATT__TAT\'), ([\'AA__AAAATTTATTTTTA\', 0], \'__AAAAAATTTATTTTTA\'), ([\'AA__AAAATTTATTTTTA\', 4], \'AAAA__AATTTATTTTTA\'), ([\'AA__AAAATTTATTTTTA\', 5], \'AAAAA__ATTTATTTTTA\'), ([\'AA__AAAATTTATTTTTA\', 6], \'AAAAAA__TTTATTTTTA\'), ([\'AA__AAAATTTATTTTTA\', 7], \'AAATAAA__TTATTTTTA\'), ([\'AA__AAAATTTATTTTTA\', 8], \'AATTAAAA__TATTTTTA\'), ([\'AA__AAAATTTATTTTTA\', 9], \'AATTAAAAT__ATTTTTA\'), ([\'AA__AAAATTTATTTTTA\', 10], \'AATAAAAATT__TTTTTA\'), ([\'AA__AAAATTTATTTTTA\', 11], \'AAATAAAATTT__TTTTA\'), ([\'AA__AAAATTTATTTTTA\', 12], \'AATTAAAATTTA__TTTA\'), ([\'AA__AAAATTTATTTTTA\', 13], \'AATTAAAATTTAT__TTA\'), ([\'AA__AAAATTTATTTTTA\', 14], \'AATTAAAATTTATT__TA\'), ([\'AA__AAAATTTATTTTTA\', 15], \'AATTAAAATTTATTT__A\'), ([\'AA__AAAATTTATTTTTA\', 16], \'AATAAAAATTTATTTT__\'), ([\'TAAAAATTTT__TAATAT\', 0], \'__AAAATTTTTATAATAT\'), ([\'TAAAAATTTT__TAATAT\', 1], \'T__AAATTTTAATAATAT\'), ([\'TAAAAATTTT__TAATAT\', 2], \'TA__AATTTTAATAATAT\'), ([\'TAAAAATTTT__TAATAT\', 3], \'TAA__ATTTTAATAATAT\'), ([\'TAAAAATTTT__TAATAT\', 4], \'TAAA__TTTTAATAATAT\'), ([\'TAAAAATTTT__TAATAT\', 5], \'TAAAA__TTTATTAATAT\'), ([\'TAAAAATTTT__TAATAT\', 6], \'TAAAAA__TTTTTAATAT\'), ([\'TAAAAATTTT__TAATAT\', 7], \'TAAAAAT__TTTTAATAT\'), ([\'TAAAAATTTT__TAATAT\', 8], \'TAAAAATT__TTTAATAT\'), ([\'TAAAAATTTT__TAATAT\', 12], \'TAAAAATTTTTA__ATAT\'), ([\'TAAAAATTTT__TAATAT\', 13], \'TAAAAATTTTAAT__TAT\'), ([\'TAAAAATTTT__TAATAT\', 14], \'TAAAAATTTTATTA__AT\'), ([\'TAAAAATTTT__TAATAT\', 15], \'TAAAAATTTTTATAA__T\'), ([\'TAAAAATTTT__TAATAT\', 16], \'TAAAAATTTTATTAAT__\'), ([\'TATTAATTATA__TATAA\', 0], \'__TTAATTATATATATAA\'), ([\'TATTAATTATA__TATAA\', 1], \'T__TAATTATAATTATAA\'), ([\'TATTAATTATA__TATAA\', 2], \'TA__AATTATATTTATAA\'), ([\'TATTAATTATA__TATAA\', 3], \'TAT__ATTATATATATAA\'), ([\'TATTAATTATA__TATAA\', 4], \'TATT__TTATAAATATAA\'), ([\'TATTAATTATA__TATAA\', 5], \'TATTA__TATAATTATAA\'), ([\'TATTAATTATA__TATAA\', 6], \'TATTAA__ATATTTATAA\'), ([\'TATTAATTATA__TATAA\', 7], \'TATTAAT__TATATATAA\'), ([\'TATTAATTATA__TATAA\', 8], \'TATTAATT__AATTATAA\'), ([\'TATTAATTATA__TATAA\', 9], \'TATTAATTA__TATATAA\'), ([\'TATTAATTATA__TATAA\', 13], \'TATTAATTATATA__TAA\'), ([\'TATTAATTATA__TATAA\', 14], \'TATTAATTATAATT__AA\'), ([\'TATTAATTATA__TATAA\', 15], \'TATTAATTATATATA__A\'), ([\'TATTAATTATA__TATAA\', 16], \'TATTAATTATAAATAT__\')]\n\n#moves_no_title += [("", ) + move for move in generated_moves]\n\nmoves = make_titled_tests(moves_no_title, "make_move")\n\ncurrent_states_no_title = [\n    (" (Sample #1 from Specification)", [STATES_0[:2]], None, "", SHOW_CURRENT_STATE_0_0),\n    (" (Sample #2 from Specification)", [STATES_0[:3]], None, "", SHOW_CURRENT_STATE_0_1),\n]\n\ncs = [(\'\', [[\'TATATATATATATATA__\', \'TATATATATATA__TATA\', \'TATATA__TATATATATA\', \'TATATATATATATATA__\', \'TATATATATATAT__AAT\']], None, \'\', \'012345678901234567\\nTATATATATATAT__AAT 15 4\\n\'), (\'\', [[\'TATATATATATATATA__\', \'TATATATATATAT__AAT\', \'TATATATATAT__ATAAT\', \'TATAT__ATATATATAAT\', \'TATATATATAT__ATAAT\', \'TATATA__TATTAATAAT\']], None, \'\', \'012345678901234567\\nTATATA__TATTAATAAT 13 5\\n\'), (\'\', [[\'TATATATATATATATA__\', \'TATATATAT__ATATAAT\', \'TAT__ATATATATATAAT\', \'TATATAT__ATATATAAT\', \'__TATATTAATATATAAT\', \'TATA__TTAATATATAAT\', \'TA__TATTAATATATAAT\', \'TAATTATTAATAT__AAT\', \'TAATTATTAAT__ATAAT\', \'TAATTATTAATAAAT__T\', \'TAATTATTAATA__TAAT\', \'TAATTAT__ATATATAAT\', \'TAATTATTAATA__TAAT\', \'TAATTAT__ATATATAAT\', \'TAATTATAAATATAT__T\', \'TAATTATAAAT__ATATT\', \'TAATTA__AATTAATATT\']], None, \'\', \'012345678901234567\\nTAATTA__AATTAATATT 10 16\\n\'), (\'\', [[\'TATATATATATATATA__\', \'TATATAT__ATATATAAT\', \'TATAT__ATATATATAAT\', \'TA__TTAATATATATAAT\', \'TATATTAATATATA__AT\', \'TATATTAATATATAAT__\', \'TATATTAAT__ATAATAT\', \'TATATTA__ATATAATAT\', \'TATATTATAATA__ATAT\', \'TATATTATAATAATAT__\', \'TATAT__TAATAATATTA\', \'TATATTTTAATAATA__A\', \'TATATTTTAATAA__TAA\', \'TATATTT__ATAATATAA\', \'TATATTTAAATAATAT__\', \'TATATTTA__TAATATAA\', \'TATA__TATTTAATATAA\', \'TATATATATTTAA__TAA\', \'TATATAT__TTAAATTAA\', \'TATATATAATTAAATT__\']], None, \'\', \'012345678901234567\\nTATATATAATTAAATT__ 11 19\\none, \'\', \'012345678901234567\\nTTTATTATTAAAAATA__ 8 32\\none, \'\', \'012345678901234567\\nTTTA__AATTTAATAATA 9 49\\n\'), (\'\', [[\'TATATATATATATATA__\', \'TATATA__TATATATATA\', \'TATATAATT__ATATATA\', \'TATATAATTTAATA__TA\', \'TATATAATTTAA__TATA\', \'TA__TAATTTAATATATA\', \'TAATTAATTTAATAT__A\', \'TAATT__TTTAATATAAA\', \'TAATTAATTTAATATA__\', \'TAAT__ATTTAATATATA\', \'TAATTAATTTAATA__TA\', \'TAA__AATTTAATATTTA\', \'TAAAAAATTT__TATTTA\', \'TA__AAATTTAATATTTA\', \'TATTAAATTTAATAT__A\', \'TATTAA__TTAATATATA\', \'TA__AATTTTAATATATA\', \'TAATAATTTTAAT__ATA\', \'TAATAATTTTA__ATATA\', \'TAATAATTTTAATAT__A\', \'TAATAATT__AATATTTA\', \'TAAT__TTAAAATATTTA\', \'TAATAATTAA__TATTTA\', \'TAATA__TAAATTATTTA\', \'TAATATTTAAATTA__TA\', \'TAA__TTTAAATTATATA\', \'TAATATTTAAAT__TATA\', \'TAATATTTAAATATT__A\', \'TAATATTTA__TATTAAA\', \'TAATAT__ATTTATTAAA\', \'TAAT__ATATTTATTAAA\', \'TAATTTATATTTA__AAA\', \'TAATTTATATTTAAA__A\', \'TAATTTATATTTA__AAA\', \'TAATTTATATT__TAAAA\', \'TAATTTATATTTA__AAA\', \'TAA__TATATTTATTAAA\', \'__ATATATATTTATTAAA\', \'ATATATATATTT__TAAA\', \'ATATATATATTTAAT__A\', \'AT__ATATATTTAATATA\', \'ATTAATATATT__ATATA\', \'ATTAATA__TTTAATATA\', \'ATTAATAATTTTAAT__A\', \'ATTAATAATTT__ATTAA\', \'ATTAATAATTTAAATT__\', \'ATT__TAATTTAAATTAA\', \'ATTAATAATTTAAATT__\', \'ATTAATAATTTAAA__TT\', \'ATTAATAAT__AAATTTT\']], None, \'\', \'012345678901234567\\nATTAATAAT__AAATTTT 8 49\\none, \'\', \'012345678901234567\\nA__TTAATAATTATAATT 10 54\\none, \'\', \'012345678901234567\\nAAA__AAATTTAATTTTT 5 65\\none, \'\', \'012345678901234567\\nTAAATTAATTTAAAT__T 8 99\\n\')]\n\ncurrent_states_no_title += cs[:3]\n\ndef show_current_state_test_formatter(data):\n    states = data[\'args\'][0]\n    moves = len(states) - 1\n    state = states[-1]\n    return "Moves: {moves:>2} Final: {state} {suffix}".format(state=state, moves=moves, suffix=data[\'suffix\'])\n\ncurrent_states = make_titled_tests(current_states_no_title, "show_current_state", show_current_state_test_formatter)\n\nINTERACT_SPEC_STDIN = "8\\n1\\n15\\nb\\n6\\nq\\n"\n\nINTERACT_SPEC_STDOUT = """How many supporters from each team? 012345678901234567\nTATATATATATATATA__ 16 0\n? 012345678901234567\nT__ATATATATATATAAT 15 1\n? 012345678901234567\nTAAATATATATATAT__T 14 2\n? 012345678901234567\nT__ATATATATATATAAT 15 1\n? 012345678901234567\nTTAATA__TATATATAAT 13 2\n? """\n\ninteractions = [\n    ("Sample from Specification", [], None, INTERACT_SPEC_STDIN, INTERACT_SPEC_STDOUT),\n    ("Immediate Quit", [], None, "20\\nq\\n", """How many supporters from each team? 012345678901234567890123456789012345678901\nTATATATATATATATATATATATATATATATATATATATA__ 40 0\n? """),\n    ("Simple Moves", [], None, "20\\n0\\n2\\n4\\n6\\n8\\n10\\nq", """How many supporters from each team? 012345678901234567890123456789012345678901\nTATATATATATATATATATATATATATATATATATATATA__ 40 0\n? 012345678901234567890123456789012345678901\n__TATATATATATATATATATATATATATATATATATATATA 40 1\n? 012345678901234567890123456789012345678901\nTA__TATATATATATATATATATATATATATATATATATATA 40 2\n? 012345678901234567890123456789012345678901\nTATA__TATATATATATATATATATATATATATATATATATA 40 3\n? 012345678901234567890123456789012345678901\nTATATA__TATATATATATATATATATATATATATATATATA 40 4\n? 012345678901234567890123456789012345678901\nTATATATA__TATATATATATATATATATATATATATATATA 40 5\n? 012345678901234567890123456789012345678901\nTATATATATA__TATATATATATATATATATATATATATATA 40 6\n? """),\n    ("Back Once", [], None, "20\\n0\\n2\\n4\\n6\\n8\\n10\\nb\\nq", """How many supporters from each team? 012345678901234567890123456789012345678901\nTATATATATATATATATATATATATATATATATATATATA__ 40 0\n? 012345678901234567890123456789012345678901\n__TATATATATATATATATATATATATATATATATATATATA 40 1\n? 012345678901234567890123456789012345678901\nTA__TATATATATATATATATATATATATATATATATATATA 40 2\n? 012345678901234567890123456789012345678901\nTATA__TATATATATATATATATATATATATATATATATATA 40 3\n? 012345678901234567890123456789012345678901\nTATATA__TATATATATATATATATATATATATATATATATA 40 4\n? 012345678901234567890123456789012345678901\nTATATATA__TATATATATATATATATATATATATATATATA 40 5\n? 012345678901234567890123456789012345678901\nTATATATATA__TATATATATATATATATATATATATATATA 40 6\n? 012345678901234567890123456789012345678901\nTATATATA__TATATATATATATATATATATATATATATATA 40 5\n? """),\n    ("Back Twice", [], None, "20\\n0\\n2\\n4\\n6\\n8\\n10\\nb\\nb\\nq", """How many supporters from each team? 012345678901234567890123456789012345678901\nTATATATATATATATATATATATATATATATATATATATA__ 40 0\n? 012345678901234567890123456789012345678901\n__TATATATATATATATATATATATATATATATATATATATA 40 1\n? 012345678901234567890123456789012345678901\nTA__TATATATATATATATATATATATATATATATATATATA 40 2\n? 012345678901234567890123456789012345678901\nTATA__TATATATATATATATATATATATATATATATATATA 40 3\n? 012345678901234567890123456789012345678901\nTATATA__TATATATATATATATATATATATATATATATATA 40 4\n? 012345678901234567890123456789012345678901\nTATATATA__TATATATATATATATATATATATATATATATA 40 5\n? 012345678901234567890123456789012345678901\nTATATATATA__TATATATATATATATATATATATATATATA 40 6\n? 012345678901234567890123456789012345678901\nTATATATA__TATATATATATATATATATATATATATATATA 40 5\n? 012345678901234567890123456789012345678901\nTATATA__TATATATATATATATATATATATATATATATATA 40 4\n? """),\n    ("Back Six Times", [], None, "20\\n0\\n2\\n4\\n6\\n8\\n10\\nb\\nb\\nb\\nb\\nb\\nb\\nq", """How many supporters from each team? 012345678901234567890123456789012345678901\nTATATATATATATATATATATATATATATATATATATATA__ 40 0\n? 012345678901234567890123456789012345678901\n__TATATATATATATATATATATATATATATATATATATATA 40 1\n? 012345678901234567890123456789012345678901\nTA__TATATATATATATATATATATATATATATATATATATA 40 2\n? 012345678901234567890123456789012345678901\nTATA__TATATATATATATATATATATATATATATATATATA 40 3\n? 012345678901234567890123456789012345678901\nTATATA__TATATATATATATATATATATATATATATATATA 40 4\n? 012345678901234567890123456789012345678901\nTATATATA__TATATATATATATATATATATATATATATATA 40 5\n? 012345678901234567890123456789012345678901\nTATATATATA__TATATATATATATATATATATATATATATA 40 6\n? 012345678901234567890123456789012345678901\nTATATATA__TATATATATATATATATATATATATATATATA 40 5\n? 012345678901234567890123456789012345678901\nTATATA__TATATATATATATATATATATATATATATATATA 40 4\n? 012345678901234567890123456789012345678901\nTATA__TATATATATATATATATATATATATATATATATATA 40 3\n? 012345678901234567890123456789012345678901\nTA__TATATATATATATATATATATATATATATATATATATA 40 2\n? 012345678901234567890123456789012345678901\n__TATATATATATATATATATATATATATATATATATATATA 40 1\n? 012345678901234567890123456789012345678901\nTATATATATATATATATATATATATATATATATATATATA__ 40 0\n? """),\n    ("Solved Puzzle", [], None, "".join([str(i) + "\\n" for i in [5,3,6,9,2,0,6,1,5,"b",5,0,"q"]]), """How many supporters from each team? 012345678901\nTATATATATA__ 10 0\n? 012345678901\nTAT__ATATAAT 9 1\n? 012345678901\nTATTAA__TAAT 7 2\n? 012345678901\nTATTAAAAT__T 6 3\n? 012345678901\nTA__AAAATTTT 4 4\n? 012345678901\n__TAAAAATTTT 3 5\n? 012345678901\nAATAAA__TTTT 4 6\n? 012345678901\nA__AAAATTTTT 3 7\n? 012345678901\nAAAAA__TTTTT 2 8\n? 012345678901\nA__AAAATTTTT 3 7\n? 012345678901\nAAAAA__TTTTT 2 8\n? 012345678901\n__AAAAATTTTT 2 9\n? """)\n\n]\n\nhistories = [(\'8\\n11\\nb\\n10\\nb\\n1\\n6\\nb\\n7\\n3\\n1\\n14\\nb\\n14\\n11\\n3\\n14\\n5\\nb\\n4\\n9\\nb\\n9\\n1\\n13\\n5\\n9\\nb\\n9\\n11\\n4\\nb\\n7\\n14\\n11\\n14\\nb\\n14\\n1\\n6\\n3\\nq\\n\', \'How many supporters from each team? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATATATATAT__ATAAT 15 1\\n? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATATATATA__TATATA 16 1\\n? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nT__ATATATATATATAAT 15 1\\n? 012345678901234567\\nTTAATA__TATATATAAT 13 2\\n? 012345678901234567\\nT__ATATATATATATAAT 15 1\\n? 012345678901234567\\nTATATAT__ATATATAAT 15 2\\n? 012345678901234567\\nTAT__ATATATATATAAT 15 3\\n? 012345678901234567\\nT__ATATATATATATAAT 15 4\\n? 012345678901234567\\nTTAATATATATATA__AT 14 5\\n? 012345678901234567\\nT__ATATATATATATAAT 15 4\\n? 012345678901234567\\nTTAATATATATATA__AT 14 5\\n? 012345678901234567\\nTTAATATATAT__AATAT 13 6\\n? 012345678901234567\\nTTA__ATATATATAATAT 14 7\\n? 012345678901234567\\nTTAATATATATATA__AT 14 8\\n? 012345678901234567\\nTTAAT__ATATATAATAT 13 9\\n? 012345678901234567\\nTTAATATATATATA__AT 14 8\\n? 012345678901234567\\nTTAA__TATATATATAAT 13 9\\n? 012345678901234567\\nTTAAATTAT__ATATAAT 11 10\\n? 012345678901234567\\nTTAA__TATATATATAAT 13 9\\n? 012345678901234567\\nTTAAATTAT__ATATAAT 11 10\\n? 012345678901234567\\nT__AATTATTAATATAAT 11 11\\n? 012345678901234567\\nTATAATTATTAAT__AAT 11 12\\n? 012345678901234567\\nTATAA__ATTAATTTAAT 10 13\\n? 012345678901234567\\nTATAATAAT__ATTTAAT 11 14\\n? 012345678901234567\\nTATAA__ATTAATTTAAT 10 13\\n? 012345678901234567\\nTATAATAAT__ATTTAAT 11 14\\n? 012345678901234567\\nTATAATAATAT__TTAAT 12 15\\n? 012345678901234567\\nTATA__AATATATTTAAT 12 16\\n? 012345678901234567\\nTATAATAATAT__TTAAT 12 15\\n? 012345678901234567\\nTATAATA__ATATTTAAT 12 16\\n? 012345678901234567\\nTATAATATAATATT__AT 13 17\\n? 012345678901234567\\nTATAATATAAT__TATAT 14 18\\n? 012345678901234567\\nTATAATATAATATT__AT 13 19\\n? 012345678901234567\\nTATAATATAAT__TATAT 14 18\\n? 012345678901234567\\nTATAATATAATATT__AT 13 19\\n? 012345678901234567\\nT__AATATAATATTATAT 13 20\\n? 012345678901234567\\nTATAAT__AATATTATAT 13 21\\n? 012345678901234567\\nTAT__TAAAATATTATAT 12 22\\n? \'), (\'8\\n5\\n9\\n4\\n6\\nb\\n6\\nb\\n16\\nb\\n2\\nb\\nb\\n7\\nb\\n14\\n4\\n2\\nb\\n0\\nb\\n9\\n11\\n9\\n15\\n0\\nb\\nb\\nb\\nb\\nb\\nb\\nb\\nb\\nb\\n4\\n2\\n11\\nb\\n5\\n7\\nq\\n\', \'How many supporters from each team? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATAT__ATATATATAAT 15 1\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 2\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 3\\n? 012345678901234567\\nTATATA__TTAATATAAT 13 4\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 3\\n? 012345678901234567\\nTATATA__TTAATATAAT 13 4\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 3\\n? 012345678901234567\\nTATAATTATTAATATA__ 12 4\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 3\\n? 012345678901234567\\nTA__TATATTAATATAAT 13 4\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 3\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 2\\n? 012345678901234567\\nTATATAT__ATATATAAT 15 3\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 2\\n? 012345678901234567\\nTATATATATTAATA__AT 14 3\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 4\\n? 012345678901234567\\nTA__TATATTAATATAAT 13 5\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 4\\n? 012345678901234567\\n__TATATATTAATATAAT 13 5\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 4\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 5\\n? 012345678901234567\\nTATATATATAT__ATAAT 15 6\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 7\\n? 012345678901234567\\nTATATATATAAATAT__T 14 8\\n? 012345678901234567\\n__TATATATAAATATTAT 13 9\\n? 012345678901234567\\nTATATATATAAATAT__T 14 8\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 7\\n? 012345678901234567\\nTATATATATAT__ATAAT 15 6\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 5\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 4\\n? 012345678901234567\\nTATATATATTAATA__AT 14 3\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 2\\n? 012345678901234567\\nTATAT__ATATATATAAT 15 1\\n? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATA__TATATATATATA 16 1\\n? 012345678901234567\\nTA__TATATATATATATA 16 2\\n? 012345678901234567\\nTAATTATATAT__ATATA 14 3\\n? 012345678901234567\\nTA__TATATATATATATA 16 2\\n? 012345678901234567\\nTAATT__ATATATATATA 14 3\\n? 012345678901234567\\nTAATTAT__ATATATATA 14 4\\n? \'), (\'8\\n6\\n16\\nb\\n12\\n14\\n4\\nb\\n4\\nb\\n0\\n5\\nb\\n6\\n12\\n6\\n9\\n11\\nb\\nb\\n10\\n16\\nb\\n1\\n4\\nb\\nb\\n1\\nb\\n7\\nb\\n7\\n11\\nb\\n3\\n13\\nb\\n12\\n3\\n13\\n2\\nq\\n\', \'How many supporters from each team? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATATA__TATATATATA 16 1\\n? 012345678901234567\\nTATATATATATATATA__ 16 2\\n? 012345678901234567\\nTATATA__TATATATATA 16 1\\n? 012345678901234567\\nTATATATATATA__TATA 16 2\\n? 012345678901234567\\nTATATATATATATA__TA 16 3\\n? 012345678901234567\\nTATA__TATATATATATA 16 4\\n? 012345678901234567\\nTATATATATATATA__TA 16 3\\n? 012345678901234567\\nTATA__TATATATATATA 16 4\\n? 012345678901234567\\nTATATATATATATA__TA 16 3\\n? 012345678901234567\\n__TATATATATATATATA 16 4\\n? 012345678901234567\\nATTAT__ATATATATATA 15 5\\n? 012345678901234567\\n__TATATATATATATATA 16 4\\n? 012345678901234567\\nTATATA__TATATATATA 16 5\\n? 012345678901234567\\nTATATATATATA__TATA 16 6\\n? 012345678901234567\\nTATATA__TATATATATA 16 7\\n? 012345678901234567\\nTATATAATT__ATATATA 14 8\\n? 012345678901234567\\nTATATAATTAT__ATATA 14 9\\n? 012345678901234567\\nTATATAATT__ATATATA 14 8\\n? 012345678901234567\\nTATATA__TATATATATA 16 7\\n? 012345678901234567\\nTATATATATA__TATATA 16 8\\n? 012345678901234567\\nTATATATATATATATA__ 16 9\\n? 012345678901234567\\nTATATATATA__TATATA 16 8\\n? 012345678901234567\\nT__ATATATAATTATATA 14 9\\n? 012345678901234567\\nTTAA__TATAATTATATA 12 10\\n? 012345678901234567\\nT__ATATATAATTATATA 14 9\\n? 012345678901234567\\nTATATATATA__TATATA 16 8\\n? 012345678901234567\\nT__ATATATAATTATATA 14 9\\n? 012345678901234567\\nTATATATATA__TATATA 16 8\\n? 012345678901234567\\nTATATAT__AATTATATA 14 9\\n? 012345678901234567\\nTATATATATA__TATATA 16 8\\n? 012345678901234567\\nTATATAT__AATTATATA 14 9\\n? 012345678901234567\\nTATATATTTAA__ATATA 13 10\\n? 012345678901234567\\nTATATAT__AATTATATA 14 9\\n? 012345678901234567\\nTAT__ATATAATTATATA 14 10\\n? 012345678901234567\\nTATATATATAATT__ATA 14 11\\n? 012345678901234567\\nTAT__ATATAATTATATA 14 10\\n? 012345678901234567\\nTATTAATATAAT__TATA 13 11\\n? 012345678901234567\\nTAT__ATATAATTATATA 14 12\\n? 012345678901234567\\nTATATATATAATT__ATA 14 13\\n? 012345678901234567\\nTA__TATATAATTTAATA 12 14\\n? \'), (\'8\\n14\\n0\\nb\\n5\\n8\\n14\\n8\\n2\\n15\\n12\\n14\\n8\\nb\\n8\\n10\\nb\\nb\\n6\\n11\\n3\\n12\\nb\\nb\\n2\\n10\\n14\\nb\\n6\\n10\\n14\\n5\\nb\\nb\\nb\\nb\\nb\\nb\\nb\\nb\\nb\\nq\\n\', \'How many supporters from each team? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATATATATATATA__TA 16 1\\n? 012345678901234567\\n__TATATATATATATATA 16 2\\n? 012345678901234567\\nTATATATATATATA__TA 16 1\\n? 012345678901234567\\nTATAT__ATATATAATTA 14 2\\n? 012345678901234567\\nTATATTAA__TATAATTA 12 3\\n? 012345678901234567\\nTATATTAAATTATA__TA 12 4\\n? 012345678901234567\\nTATATTAA__TATAATTA 12 5\\n? 012345678901234567\\nTA__TTAATATATAATTA 12 6\\n? 012345678901234567\\nTATTTTAATATATAA__A 11 7\\n? 012345678901234567\\nTATTTTAATATA__ATAA 11 8\\n? 012345678901234567\\nTATTTTAATATAAT__AA 10 9\\n? 012345678901234567\\nTATTTTAA__TAATTAAA 8 10\\n? 012345678901234567\\nTATTTTAATATAAT__AA 10 9\\n? 012345678901234567\\nTATTTTAA__TAATTAAA 8 10\\n? 012345678901234567\\nTATTTTAATA__ATTAAA 9 11\\n? 012345678901234567\\nTATTTTAA__TAATTAAA 8 10\\n? 012345678901234567\\nTATTTTAATATAAT__AA 10 9\\n? 012345678901234567\\nTATTTT__TATAATAAAA 9 10\\n? 012345678901234567\\nTATTTTAATAT__TAAAA 9 11\\n? 012345678901234567\\nTAT__TAATATTTTAAAA 9 12\\n? 012345678901234567\\nTATTTTAATATT__AAAA 8 13\\n? 012345678901234567\\nTAT__TAATATTTTAAAA 9 12\\n? 012345678901234567\\nTATTTTAATAT__TAAAA 9 11\\n? 012345678901234567\\nTA__TTAATATTTTAAAA 8 12\\n? 012345678901234567\\nTATTTTAATA__TTAAAA 8 13\\n? 012345678901234567\\nTATTTTAATAAATT__AA 8 14\\n? 012345678901234567\\nTATTTTAATA__TTAAAA 8 13\\n? 012345678901234567\\nTATTTT__TAAATTAAAA 7 14\\n? 012345678901234567\\nTATTTTAATA__TTAAAA 8 15\\n? 012345678901234567\\nTATTTTAATAAATT__AA 8 16\\n? 012345678901234567\\nTATTT__ATAAATTTAAA 8 17\\n? 012345678901234567\\nTATTTTAATAAATT__AA 8 16\\n? 012345678901234567\\nTATTTTAATA__TTAAAA 8 15\\n? 012345678901234567\\nTATTTT__TAAATTAAAA 7 14\\n? 012345678901234567\\nTATTTTAATA__TTAAAA 8 13\\n? 012345678901234567\\nTA__TTAATATTTTAAAA 8 12\\n? 012345678901234567\\nTATTTTAATAT__TAAAA 9 11\\n? 012345678901234567\\nTATTTT__TATAATAAAA 9 10\\n? 012345678901234567\\nTATTTTAATATAAT__AA 10 9\\n? 012345678901234567\\nTATTTTAATATA__ATAA 11 8\\n? \'), (\'8\\n2\\nb\\n11\\nb\\n10\\n7\\n15\\n9\\nb\\nb\\nb\\n7\\n3\\n5\\n1\\n13\\nb\\n11\\n5\\n14\\n8\\n5\\n2\\n5\\nb\\nb\\n12\\n10\\nb\\n2\\n11\\n1\\nb\\n3\\n5\\n11\\n1\\n12\\n10\\n16\\nq\\n\', \'How many supporters from each team? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTA__TATATATATATATA 16 1\\n? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATATATATAT__ATAAT 15 1\\n? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATATATATA__TATATA 16 1\\n? 012345678901234567\\nTATATAT__AATTATATA 14 2\\n? 012345678901234567\\nTATATATATAATTAT__A 14 3\\n? 012345678901234567\\nTATATATAT__TTATAAA 13 4\\n? 012345678901234567\\nTATATATATAATTAT__A 14 3\\n? 012345678901234567\\nTATATAT__AATTATATA 14 2\\n? 012345678901234567\\nTATATATATA__TATATA 16 1\\n? 012345678901234567\\nTATATAT__AATTATATA 14 2\\n? 012345678901234567\\nTAT__ATATAATTATATA 14 3\\n? 012345678901234567\\nTATAT__ATAATTATATA 14 4\\n? 012345678901234567\\nT__ATATATAATTATATA 14 5\\n? 012345678901234567\\nTATATATATAATT__ATA 14 6\\n? 012345678901234567\\nT__ATATATAATTATATA 14 5\\n? 012345678901234567\\nTTTATATATAA__ATATA 13 6\\n? 012345678901234567\\nTTTAT__ATAAATATATA 12 7\\n? 012345678901234567\\nTTTATTAATAAATA__TA 10 8\\n? 012345678901234567\\nTTTATTAA__AATATATA 11 9\\n? 012345678901234567\\nTTTAT__ATAAATATATA 12 10\\n? 012345678901234567\\nTT__TTAATAAATATATA 11 11\\n? 012345678901234567\\nTTTAT__ATAAATATATA 12 12\\n? 012345678901234567\\nTT__TTAATAAATATATA 11 11\\n? 012345678901234567\\nTTTAT__ATAAATATATA 12 10\\n? 012345678901234567\\nTTTATTAATAAA__TATA 10 11\\n? 012345678901234567\\nTTTATTAATA__AATATA 11 12\\n? 012345678901234567\\nTTTATTAATAAA__TATA 10 11\\n? 012345678901234567\\nTT__TTAATAAATATATA 11 12\\n? 012345678901234567\\nTTATTTAATAA__ATATA 11 13\\n? 012345678901234567\\nT__TTTAATAATAATATA 11 14\\n? 012345678901234567\\nTTATTTAATAA__ATATA 11 13\\n? 012345678901234567\\nTTA__TAATAATTATATA 12 14\\n? 012345678901234567\\nTTATA__ATAATTATATA 13 15\\n? 012345678901234567\\nTTATATTATAA__ATATA 13 16\\n? 012345678901234567\\nT__TATTATAATAATATA 13 17\\n? 012345678901234567\\nTAATATTATAAT__TATA 13 18\\n? 012345678901234567\\nTAATATTATA__ATTATA 13 19\\n? 012345678901234567\\nTAATATTATATAATTA__ 12 20\\n? \')]\n\nfor i, (stdin, stdout) in enumerate(histories):\n    if i == 2: # No need for more than two of these\n        break\n    title = "Random History #{}".format(i + 1)\n    args = []\n    result = None\n    test = (title, args, result, stdin, stdout)\n    interactions.append(test)\n\ninteractions = make_ordered_tests(interactions)'
MAXDIFF = 2500
SHOW_VERSION = False
# END DEFAULTS #
##############################################################################

import argparse
import unittest
from io import StringIO
import sys
import collections
import difflib
import contextlib
import warnings
import traceback

parser = argparse.ArgumentParser()
parser.add_argument("script",
    help="The script you want to run the tests against.",
    nargs="?",
    default=SCRIPT)
parser.add_argument("test_data",
    help="The file containing test data to use.",
    nargs="?",
    default=TEST_DATA)
parser.add_argument("-d", "--diff",
    help="The maximum number of characters in a diff",
    action="store",
    type=int,
    default=MAXDIFF)
parser.add_argument("-m", "--masters",
    help="Whether or not to utilize master's tests.",
    action='store_true',
    default=CSSE7030)
parser.add_argument('unittest_args', nargs='*')

args = parser.parse_args()

if args.test_data:
    data = __import__(args.test_data.rstrip('.py'))
else:
    import imp
    data = imp.new_module('data')
    exec(TEST_DATA_RAW, data.__dict__)

try:
    assign1 = __import__(args.script.rstrip('.py').replace("/","."))
except SyntaxError as e:
    print("/-----------------------------------\\")
    print("| Tests not run due to syntax error |")
    print("\\-----------------------------------/")
    traceback.print_exception(SyntaxError, e, None, file=sys.stdout)
    sys.exit(0)

class CsseTestResult(unittest.TextTestResult):
    def startTest(self, test):
        super(unittest.TextTestResult, self).startTest(test)
        self.runbuffer = StringIO()
        self.runbuffer.write(test.id().split('.')[-1].strip().split('test_', 1)[-1])
        self.runbuffer.write(": {} \n")
        self.stream.flush()
        self._stcount = 0
        self._stpass = 0

    def addSubTest(self, test, subtest, err):
        self._stcount += 1
        super().addSubTest(test,subtest,err)
        if err:
            self.runbuffer.write("  - ")
        else:
            self._stpass += 1
            self.runbuffer.write("  + ")
        self.runbuffer.write(subtest.id().lstrip(test.id()).strip()[1:-1] + "\n")

    def addFailure(self, test, err):
        self.stream.write("\t" + test.id().lstrip("test_"))
        self.stream.writeln("... FAIL")
        super(unittest.TextTestResult, self).addFailure(test, err)

    def addSuccess(self, test):
        super(unittest.TextTestResult, self).addSuccess(test)
        if self.dots:
            self.stream.write('.')
            self.stream.flush()

    def printErrors(self):
        if self.errors or self.failures:
            self.stream.writeln("\n/--------------\\")
            self.stream.writeln("| Failed Tests |")
            self.stream.writeln("\\--------------/")
        if self.dots or self.showAll:
            self.stream.writeln()
        self.printErrorList('ERROR', self.errors)
        self.printErrorList('FAIL', self.failures)

    def printErrorList(self, flavour, errors):
        for test, err in errors:
            self.stream.writeln(self.separator1)
            self.stream.writeln("%s: %s" % (flavour,self.getDescription(test)))
            self.stream.writeln(self.separator2)
            self.stream.writeln("%s" % err)

    def stopTest(self, test):
        super().stopTest(test)
        self.runbuffer.seek(0)
        self.stream.writeln(self.runbuffer.read().format("{}/{}".format(self._stpass,self._stcount)))
        del self.runbuffer

    def _exc_info_to_string(self, err, test):
        """Converts a sys.exc_info()-style tuple of values into a string."""
        exctype, value, tb = err
        # Skip test runner traceback levels
        while tb and self._is_relevant_tb_level(tb):
            tb = tb.tb_next

        if exctype is test.failureException:
            # Skip assert*() traceback levels
            length = self._count_relevant_tb_levels(tb)
            msgLines = traceback.format_exception_only(exctype, value)
        else:
            msgLines = traceback.format_exception(exctype, value, tb)

        if self.buffer:
            output = sys.stdout.getvalue()
            error = sys.stderr.getvalue()
            if output:
                if not output.endswith('\n'):
                    output += '\n'
                msgLines.append(STDOUT_LINE % output)
            if error:
                if not error.endswith('\n'):
                    error += '\n'
                msgLines.append(STDERR_LINE % error)
        return ''.join(msgLines)


class Csse1001TestCase(unittest.TestCase):
    def id(self):
        return super().id().split('.')[-1].strip()

    class CsseSubtest(unittest.case._SubTest):
        def id(self):
            return super(Csse1001TestCase.CsseSubtest, self).id().split('test_')[-1].strip()

    maxDiff = args.diff
    def __str__(self):
        return "Test "+self._testMethodName[5:]

    @contextlib.contextmanager
    def subTest(self, msg=None, **params):
        """Return a context manager that will return the enclosed block
        of code in a subtest identified by the optional message and
        keyword parameters.  A failure in the subtest marks the test
        case as failed but resumes execution at the end of the enclosed
        block, allowing further test code to be executed.
        """
        if not self._outcome.result_supports_subtests:
            yield
            return
        parent = self._subtest
        if parent is None:
            params_map = collections.ChainMap(params)
        else:
            params_map = parent.params.new_child(params)
        self._subtest = Csse1001TestCase.CsseSubtest(self, msg, params_map)
        try:
            with self._outcome.testPartExecutor(self._subtest, isTest=True):
                yield
            if not self._outcome.success:
                result = self._outcome.result
                if result is not None and result.failfast:
                    raise unittest.case._ShouldStop
            elif self._outcome.expectedFailure:
                # If the test is expecting a failure, we really want to
                # stop now and register the expected failure.
                raise unittest.case._ShouldStop
        finally:
            self._subtest = parent
            
    def assertMultiLineEqual(self, first, second, msg=None):
        """Assert that two multi-line strings are equal."""
        self.assertIsInstance(first, str, 'First argument is not a string')
        self.assertIsInstance(second, str, 'Second argument is not a string')

        if first != second:
          # don't use difflib if the strings are too long
          if (len(first) > self._diffThreshold or
              len(second) > self._diffThreshold):
              self._baseAssertEqual(first, second, msg)
          firstlines = first.splitlines(keepends=True)
          secondlines = second.splitlines(keepends=True)
          if len(firstlines) == 1 and first.strip('\r\n') == first:
              firstlines = [first + '\n']
              secondlines = [second + '\n']
          _common_shorten_repr = unittest.util._common_shorten_repr
          standardMsg = '%s != %s' % _common_shorten_repr(first, second)
          diff = '\n' + '\n'.join(difflib.ndiff(firstlines, secondlines))
          diff = "\n".join([x for x in diff.split('\n') if x.strip()])
          standardMsg = self._truncateMessage(standardMsg, "\n" + diff)
          self.fail(self._formatMessage(msg, standardMsg))


def addGetTestCases(fnname,dataname, f=lambda x: x):
    def fn(self):
        for i, args, res in eval("data.{}".format(dataname)):
            with self.subTest(i):
                fail = 0
                try:
                    fn = eval("assign1." + fnname)
                except AttributeError:
                    fail = 1

                    # attempt to guess function
                    guesses = function_best_guess(fnname)
                    if len(guesses) > 0:
                        fn = getattr(assign1, guesses[0])
                        fail = 0

                if fail:
                    self.fail("No function named '" +fnname +"'")

                self.assertEqual(f(fn(*args)),f(res))
    setattr(Csse1001TestCase, "test_{}".format(fnname),fn)


def addIOTestCases(fnname, dataname, fout = lambda x: x, fret = lambda x: x, exit_allowed = True, strict_return = True):
    d = eval("data.{}".format(dataname))
    def fn(self):
        self._in = sys.stdin
        self._out = sys.stdout
        for i, args, res, stdin, stdout in d:
            sys.stdin = StringIO()
            sys.stdout = StringIO()

            with self.subTest(i):
                fail = 0
                try:
                    fn = eval("assign1." + fnname)
                except AttributeError:
                    fail = 1
                if fail:
                    self.fail("No function named '" +fnname +"'")



                sys.stdin.write(stdin)
                sys.stdin.seek(0)

                # ignore quit/exit
                exited = False
                try:
                    real_res = fret(fn(*args))
                    if strict_return:
                        self.assertEqual(real_res,fret(res))
                except SystemExit as e:
                    exited = True
                    if not exit_allowed:
                        raise e

                sys.stdout.seek(0)
                self.assertEqual(fout(sys.stdout.read()), fout(stdout))
        sys.stdin = self._in
        sys.stdout = self._out

    setattr(Csse1001TestCase, "test_{}".format(fnname),fn)

def addDocstringTests(data, label_formatter=lambda i, name: name):
    def fn(self):
        for i, fnname in enumerate(data):
            with self.subTest(label_formatter(i, fnname)):
                fail = 0
                try:
                    fn = eval("assign1." + fnname)
                except AttributeError:
                    fail = 1

                    # attempt to guess function
                    guesses = function_best_guess(fnname)
                    if len(guesses) > 0:
                        fn = getattr(assign1, guesses[0])
                        fail = 0
                if fail:
                    self.fail("No function named '" +fnname +"'")
                self.assertTrue(fn.__doc__ is not None and fn.__doc__.strip(),
                                     "Function "+fnname+" should have a docstring")
    setattr(Csse1001TestCase, "test_docstrings",fn)

def addNoExitTest():
    fnname = "interact"
    name = "Graceful Quit"
    args = []

    oldfn = getattr(Csse1001TestCase, "test_interact")

    def fn(self):
        oldfn(self)

        self._in = sys.stdin
        self._out = sys.stdout

        sys.stdin = StringIO()
        sys.stdout = StringIO()

        with self.subTest("10.  " + name):
            fail = 0
            try:
                fn = eval("assign1." + fnname)
            except AttributeError:
                fail = 1
            if fail:
                self.fail("No function named '" +fnname +"'")

            sys.stdin.write("8\nq\n")
            sys.stdin.seek(0)

            # ignore quit/exit
            exited = False
            try:
                fn(*args)
            except SystemExit as e:
                exited = True
                self.fail("exit()/quit() should not be called (use break/return instead)")
            except Exception as e:
                pass

            sys.stdin = self._in
            sys.stdout = self._out

    setattr(Csse1001TestCase, "test_interact", fn)

def fix_floats(data):
    return [(x,) +tuple(map(lambda x:float(round(x,10)),y)) for x,*y in data]

import re
def duplicate_whitespace_strip(string):
    #string = string.strip()

    # ensure space after prompt
    string = re.sub(r'[?]([^ ])', '? \\1', string)
    string = re.sub(r'[?]', '? ', string)

    # remove excessive spaces
    string = re.sub(r'[ ]{2,}', ' ', string)
    return string

addGetTestCases("make_initial_state","initial_states")
addGetTestCases("make_position_string","position_strings")
addGetTestCases("num_diffs","diffs")
addGetTestCases("position_of_blanks","blank_positions")
addGetTestCases("make_move","moves")

addIOTestCases("show_current_state","current_states", strict_return=False)
addIOTestCases("interact","interactions", duplicate_whitespace_strip)


### any extra masters tests ###
# i.e.
# if args.masters:
#     ...

fns = """
make_initial_state
make_position_string
num_diffs
position_of_blanks
make_move
show_current_state
interact
""".strip().split()

# if args.masters:
#     fns +=["data_comparison", "display_comparison"]


addDocstringTests(fns, label_formatter=lambda i, name: "{i:<4} {name}".format(i=str(i + 1) + ".", name=name))

addNoExitTest()

def function_best_guess(fn):
    return difflib.get_close_matches(fn, dir(assign1))

def addFunctionNameTests(fnnames):
    # Check for correct function names
    def fn(self):
        for i, fnname in enumerate(fnnames):
            with self.subTest('{i:<4} {name}'.format(i=str(i + 1) + '.', name=fnname)):
                if not getattr(assign1, fnname, False):
                    text = "No function named '{}'.".format(fnname)
                    guesses = function_best_guess(fnname)

                    if len(guesses) == 1:
                        text += " Perhaps '{}'".format(guesses[0])
                    elif len(guesses) > 1:
                        guesses = ["'{}'".format(guess) for guess in guesses]
                        guesses[-1] = "or "
                        guesses = ", ".join(guesses)
                        text += " Perhaps {}".format(guesses)
                    self.fail(text)

    setattr(Csse1001TestCase, "test_naming", fn)

addFunctionNameTests(fns)

test_sections = fns + ["docstrings", "naming"]

def methodCmp(a, b):
    global fns
    As = [i for i,x in enumerate(test_sections) if x in a]
    Bs = [i for i,x in enumerate(test_sections) if x in b]
    return As[0] - Bs[0]

def wrap(text, length=80):
    return [text[i:i+length] for i in range(0, len(text), length)]

# exit/quit patching
# real_quit = quit
# real_exit = exit
#
# def fake_exit(*args, **kwargs):
#     raise Warning("exit() should not be used")
#
# def fake_quit(*args, **kwargs):
#     raise Warning("quit() should not be used")
#
#
# sys.__dict__['exit'] = fake_exit
# assign1.__dict__['exit'] = fake_exit
# assign1.__dict__['quit'] = fake_quit



if __name__=="__main__":
    if SHOW_VERSION:
        print("Version {}\n".format(VERSION))

    #print("#" * 79)
    #[print(line) for line in wrap("Note that passing these tests does not necessarily imply that your assignment is complete or correct, but that there are no basic issues.", 79)]
    #print("#" * 79)
    print()

    sys.argv[1:] = args.unittest_args
    runner = unittest.TextTestRunner(verbosity=9, resultclass=CsseTestResult, stream=sys.stdout)
    loader = unittest.defaultTestLoader
    loader.sortTestMethodsUsing=methodCmp
    print("/--------------------\\")
    print("| Summary of Results |")
    print("\\--------------------/")
    unittest.main(testRunner=runner, testLoader=loader)
